# coding: utf-8

"""
    Alertmanager API

    API of the Prometheus Alertmanager (https://github.com/prometheus/alertmanager)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AlertStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'silenced_by': 'list[str]',
        'inhibited_by': 'list[str]'
    }

    attribute_map = {
        'state': 'state',
        'silenced_by': 'silencedBy',
        'inhibited_by': 'inhibitedBy'
    }

    def __init__(self, state=None, silenced_by=None, inhibited_by=None):  # noqa: E501
        """AlertStatus - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._silenced_by = None
        self._inhibited_by = None
        self.discriminator = None

        self.state = state
        self.silenced_by = silenced_by
        self.inhibited_by = inhibited_by

    @property
    def state(self):
        """Gets the state of this AlertStatus.  # noqa: E501


        :return: The state of this AlertStatus.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AlertStatus.


        :param state: The state of this AlertStatus.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["unprocessed", "active", "suppressed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def silenced_by(self):
        """Gets the silenced_by of this AlertStatus.  # noqa: E501


        :return: The silenced_by of this AlertStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._silenced_by

    @silenced_by.setter
    def silenced_by(self, silenced_by):
        """Sets the silenced_by of this AlertStatus.


        :param silenced_by: The silenced_by of this AlertStatus.  # noqa: E501
        :type: list[str]
        """
        if silenced_by is None:
            raise ValueError("Invalid value for `silenced_by`, must not be `None`")  # noqa: E501

        self._silenced_by = silenced_by

    @property
    def inhibited_by(self):
        """Gets the inhibited_by of this AlertStatus.  # noqa: E501


        :return: The inhibited_by of this AlertStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._inhibited_by

    @inhibited_by.setter
    def inhibited_by(self, inhibited_by):
        """Sets the inhibited_by of this AlertStatus.


        :param inhibited_by: The inhibited_by of this AlertStatus.  # noqa: E501
        :type: list[str]
        """
        if inhibited_by is None:
            raise ValueError("Invalid value for `inhibited_by`, must not be `None`")  # noqa: E501

        self._inhibited_by = inhibited_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
