# coding: utf-8

"""
    Alertmanager API

    API of the Prometheus Alertmanager (https://github.com/prometheus/alertmanager)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.alertmanager_config import AlertmanagerConfig  # noqa: F401,E501
from swagger_client.models.cluster_status import ClusterStatus  # noqa: F401,E501
from swagger_client.models.version_info import VersionInfo  # noqa: F401,E501


class AlertmanagerStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster': 'ClusterStatus',
        'version_info': 'VersionInfo',
        'config': 'AlertmanagerConfig',
        'uptime': 'datetime'
    }

    attribute_map = {
        'cluster': 'cluster',
        'version_info': 'versionInfo',
        'config': 'config',
        'uptime': 'uptime'
    }

    def __init__(self, cluster=None, version_info=None, config=None, uptime=None):  # noqa: E501
        """AlertmanagerStatus - a model defined in Swagger"""  # noqa: E501

        self._cluster = None
        self._version_info = None
        self._config = None
        self._uptime = None
        self.discriminator = None

        self.cluster = cluster
        self.version_info = version_info
        self.config = config
        self.uptime = uptime

    @property
    def cluster(self):
        """Gets the cluster of this AlertmanagerStatus.  # noqa: E501


        :return: The cluster of this AlertmanagerStatus.  # noqa: E501
        :rtype: ClusterStatus
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this AlertmanagerStatus.


        :param cluster: The cluster of this AlertmanagerStatus.  # noqa: E501
        :type: ClusterStatus
        """
        if cluster is None:
            raise ValueError("Invalid value for `cluster`, must not be `None`")  # noqa: E501

        self._cluster = cluster

    @property
    def version_info(self):
        """Gets the version_info of this AlertmanagerStatus.  # noqa: E501


        :return: The version_info of this AlertmanagerStatus.  # noqa: E501
        :rtype: VersionInfo
        """
        return self._version_info

    @version_info.setter
    def version_info(self, version_info):
        """Sets the version_info of this AlertmanagerStatus.


        :param version_info: The version_info of this AlertmanagerStatus.  # noqa: E501
        :type: VersionInfo
        """
        if version_info is None:
            raise ValueError("Invalid value for `version_info`, must not be `None`")  # noqa: E501

        self._version_info = version_info

    @property
    def config(self):
        """Gets the config of this AlertmanagerStatus.  # noqa: E501


        :return: The config of this AlertmanagerStatus.  # noqa: E501
        :rtype: AlertmanagerConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this AlertmanagerStatus.


        :param config: The config of this AlertmanagerStatus.  # noqa: E501
        :type: AlertmanagerConfig
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501

        self._config = config

    @property
    def uptime(self):
        """Gets the uptime of this AlertmanagerStatus.  # noqa: E501


        :return: The uptime of this AlertmanagerStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this AlertmanagerStatus.


        :param uptime: The uptime of this AlertmanagerStatus.  # noqa: E501
        :type: datetime
        """
        if uptime is None:
            raise ValueError("Invalid value for `uptime`, must not be `None`")  # noqa: E501

        self._uptime = uptime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertmanagerStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertmanagerStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
